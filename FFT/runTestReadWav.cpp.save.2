#define FIXED_POINT 16
#include<iostream>
#include<fstream>
#include "readWav.h"
#include "tools/kiss_fftr.h"
#include <vector>
#include <complex>


using namespace std;

int main(int argc, char *argv[])
{
WavReader wvRdr;
ifstream input;
input.open(argv[1],ios::in | ios::binary);
wvRdr.init();

if(0 != wvRdr.GetWavInfo(input))
{
cout<<"Error at __LINE__. Error in GetWavInfo(). Exiting..."<<endl;
return 1;
}
int nfft = wvRdr.GetPacketLength();
int SongLength = wvRdr.GetSongLength();
int epochCount = (SongLength + nfft -1)/nfft;
cout<<"epochCount = "<<epochCount<<endl;

ofstream oFile("/home/alex/Music/output.wav");

kiss_fftr_cfg cfg = kiss_fftr_alloc(nfft, 0,NULL,NULL); // FFT object
int16_t *samples;
kiss_fft_cpx* spectrum = (kiss_fft_cpx*) calloc(nfft, sizeof(kiss_fft_cpx));
for(int i = 0; i<epochCount; i++)
{
 wvRdr.ReadWav(input);
   samples = (int16_t *)wvRdr.m_buff;
   kiss_fftr(cfg, (kiss_fft_scalar*)samples , spectrum);
cout<<"Sample Rate = "<<wvRdr.m_sampleRate<<endl;
cout<<"Packet Size = "<<nfft<<endl;
 for(int j = 0; j< nfft/2 +1 ;j++)
 {
float freq = j*wvRdr.m_sampleRate/nfft;
cout<<"Bin "<<j<<":   Freq ~= "<<freq <<"   R("<<spectrum[j].r<<")   I("<<spectrum[j].i<<")"<<endl;
  //oFile <<wvRdr.m_buff[j];

 }

}
free(spectrum);
free(cfg);
input.close();
oFile.close();
wvRdr.Finish();
return 0;
}
